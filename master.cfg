#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import time
import requests
import deb822
from buildbot import version
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth
from buildbot.status.html import WebStatus

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable

from buildbot.buildslave import BuildSlave

from buildbot.steps.source import Git
from buildbot.steps.shell import SetPropertyFromCommand, ShellCommand
from buildbot.steps.trigger import Trigger

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.filter import ChangeFilter

from buildbot.config import BuilderConfig

from buildbot.process.properties import WithProperties, Interpolate
from buildbot.process.factory import BuildFactory

if version == '0.8.9': # Debian Jessie
    from buildbot.schedulers.forcesched import ForceScheduler
elif version == '0.8.12': # pip
    from buildbot.plugins import schedulers
    ForceScheduler = schedulers.ForceScheduler

from debian.changelog import Changelog

# auth data
from auth import BB_USER, BB_PASSWD, HTTP_WEB_PORT, PROTOCOL_PORT, MIRROR_AUTH, B1_AUTH, B2_AUTH, B3_AUTH 


##################### VARIABLES GLOBALES ##########################

REPO_DIR = '/srv/repositorios/canaima'
DESCARGAS = '/srv/repositorios/descargar'
UPLOAD_DIR = '/srv/repositorios/uploads/mondongo/'

# Repositorio donde se guarda la configuracion basica de live-build para Canaima
LBCONFIG_URL = 'http://gitlab.canaima.softwarelibre.gob.ve/canaima-gnu-linux/canaima-lbconfig.git'


##################### FUNCIONES ADICIONALES ##########################

def parse_changelog(rc, stdout, stderr):
    '''
    Parsear changelog a partir de un cat <archivo-changelog>
    '''
    c = Changelog(stdout)
    return {'version' : c.full_version,
            'package' : c.package}

def parse_control(rc, stdout, stderr):
    '''
    Parsear un archivo debian control
    '''
    archi = ''

    for control in deb822.Deb822.iter_paragraphs(stdout):
        archi = control.get('Architecture')

    if archi == 'all' or archi == 'any':
        archi = 'i386' 

    return {'architecture' : archi}

def check_i386(step):
    '''
    Funcion que solamente chequea la arquitectura
    '''
    arch = step.build.getProperty('architecture')
    if arch  == 'i386' or arch == 'all' or arch == 'any':
        return True

    return False

def check_amd64(step):
    '''
    Funcion que solamente chequea la arquitectura
    '''
    if (step.build.getProperty('architecture') == 'amd64'):
        return True

    return False

##################### CONFIGURACION BASICA  ##########################

c = BuildmasterConfig = {}

c['status'] = []
# informacion de los esclavos
c['slaves'] = []
# cambios en las fuentes
c['change_source'] = []
# horarios
c['schedulers'] = []
# constructores
c['builders'] = []
# Url local
c['buildbotURL'] = 'http://localhost:80/'

c['protocols'] = {'pb': {'port': PROTOCOL_PORT}}

# lista de constructores 'forzables'
forced_builders = []

##################### LISTA DE PAQUETES  #############################

paquetes = []

#packages['list'] = filter(None, open('repos.list', 'r').read().split('\n'))

lista_repos = requests.get("http://servicios.canaima.net.ve/api/0.1/repositorios/").json()['objects']

for url in lista_repos:
    package_name = os.path.basename(url['Url']).split('.')[0].encode('ascii')
    paquetes.append({'url': url['Url'], 'name': package_name})

##################### CONFIGURACION VCS  #############################

vcs = {}

vcs['branches'] = ['master', 'desarrollo']

# rama de desarrollo, de momento la unica donde se construyen paquetes
vcs['dev'] = 'desarrollo'

# Cada cuanto tiempo buildbot espera por nuevos cambios en el git
vcs['time'] = 60

# Cada cuanto tiempo buildbot revisar cambios en el git
vcs['pollinterval'] = 60 

############## DEFINICION DE ESCLAVOS DE CONSTRUCCION #################

slaves = {}

slaves['isos'] = {}

slaves['packages'] = {}

slaves['packages']['mirror'] = MIRROR_AUTH

slaves['isos']['constructor1'] = B1_AUTH

slaves['isos']['constructor2'] = B2_AUTH

slaves['isos']['constructor3'] = B3_AUTH

######################### GITPOLLERS #################################

# Supervisan repositorios GIT para ver si hay cambios en los repositorios 
# de la lista de paquetes
# Hay que hacer mas de estos para definir la lista de pollers por arquitectura

for paquete in paquetes:
    c['change_source'].append(
        GitPoller(repourl=paquete['url'],
              project= '%s' % paquete['name'],
              branches=vcs['branches'],
              pollinterval=vcs['pollinterval'])
    )

############## CREACION DE ESCLAVOS DE CONSTRUCCION ##################

for tipo in slaves.values():
    for slave in tipo.values():
        c['slaves'].append(BuildSlave(slave['user'], slave['passwd']))

############################## CONSTRUCCION PAQUETES ############################

for paquete in paquetes:
    package = paquete['name']
    CLONE_DIR = 'build'
    BUILD_DIR = os.path.join(CLONE_DIR, package)
    all_steps = [
        ShellCommand(command = 'rm -rf *'),
        ShellCommand(command = ['git', 'clone', paquete['url']], workdir=CLONE_DIR, haltOnFailure = True),
        ShellCommand(command = ['git', 'checkout', vcs['dev']], workdir=BUILD_DIR),
        SetPropertyFromCommand(command = "cat debian/changelog", extract_fn=parse_changelog, workdir=BUILD_DIR, haltOnFailure = True),
        SetPropertyFromCommand(command = "cat debian/control", extract_fn=parse_control, workdir=BUILD_DIR, haltOnFailure = True),
        ShellCommand(command = ['gbp', 'buildpackage', '--git-pbuilder', '--git-dist=jessie', '--git-debian-branch='+vcs['dev'],
            '--git-upstream-tree='+vcs['dev'], '--git-arch=i386', '-us', '-uc'], doStepIf=check_i386, workdir=BUILD_DIR, haltOnFailure = True),
        ShellCommand(command = ['gbp', 'buildpackage', '--git-pbuilder', '--git-dist=jessie', '--git-debian-branch='+vcs['dev'],
            '--git-upstream-tree='+vcs['dev'], '--git-arch=amd64', '-us', '-uc'], doStepIf=check_amd64, workdir=BUILD_DIR, haltOnFailure = True),
        ShellCommand(command = WithProperties("lintian %(package)s_%(version)s_%(architecture)s.changes"), workdir=CLONE_DIR, haltOnFailure = False),
        ShellCommand(command = WithProperties("dupload --nomail -t desarrollo %(package)s_%(version)s_%(architecture)s.changes"), workdir=CLONE_DIR, haltOnFailure = True),
        ShellCommand(command = 'for CHANGE in $(ls -1 /srv/repositorios/uploads/mondongo/*.changes); do reprepro --ignore=wrongdistribution include mondongo $CHANGE; done', workdir=REPO_DIR, haltOnFailure = False),
        ShellCommand(command = 'rm -rf *', workdir=UPLOAD_DIR),
    ]

    # Registrando constructor
    c['builders'].append(BuilderConfig(name=package, factory=BuildFactory(all_steps), slavenames='mirror'))

    # Registrando horario del constructor
    sbched = SingleBranchScheduler(name=package,
        change_filter = ChangeFilter(project=package, branch=vcs['dev']),
        treeStableTimer = 10,
        builderNames = [package])
    c['schedulers'].append(sbched)

    # Agregando constructor a la lista de 'forzados'
    forced_builders.append(package)

############################# COPY MONDONGO -> CHIMANTA ###############################

copy_builder = 'copy-package'

all_steps = [
    ShellCommand(command=  WithProperties("reprepro copy chimanta mondongo %(package_name)s"), workdir=REPO_DIR),
]

# Registrando constructor
c['builders'].append(BuilderConfig(name=copy_builder, factory=BuildFactory(all_steps), slavenames='mirror'))

# agregando a la lista de 'forzados'
forced_builders.append(copy_builder)

############################## Construccion de Imagenes ISO ###########################

for slave_name in slaves['isos'].keys():
    lb_steps = [
        ShellCommand(command = 'sudo lb clean', workdir='build/'),
        ShellCommand(command = 'sudo rm -rf lbconfig'),
        ShellCommand(command = ['git', 'clone', LBCONFIG_URL, 'lbconfig'], workdir='build/', haltOnFailure = True),
        ShellCommand(command = ['git', 'checkout', 'master'], workdir='build/lbconfig', haltOnFailure = False),
        ShellCommand(command = WithProperties("/usr/bin/c-c -k %(desk)s -a %(arch)s -f %(flav)s -d %(dist)s -b %(branch)s"), workdir='build/lbconfig', haltOnFailure = True),
        ShellCommand(command = 'sudo lb build', workdir='build/lbconfig', haltOnFailure = True, timeout = 3600),
        ShellCommand(command = WithProperties("sudo mv canaima-%(desk)s-%(dist)s-%(arch)s.hybrid.iso canaima-%(desk)s-%(dist)s-5.0~b3-%(flav)s.iso"), workdir='build/lbconfig', haltOnFailure = True),
        ShellCommand(command = WithProperties("scp -P 25000 canaima-%(desk)s-%(dist)s-5.0~b3-%(flav)s.iso mirror@200.11.148.219:/srv/repositorios/descargar"), workdir='build/lbconfig', haltOnFailure = True),
        ShellCommand(command = WithProperties("md5sum canaima-%(desk)s-%(dist)s-5.0~b3-%(flav)s.iso > canaima-%(desk)s-%(dist)s-5.0~b3-%(flav)s.iso.md5"), workdir=DESCARGAS, haltOnFailure = True),
    ]

    # Registrando constructor
    c['builders'].append(BuilderConfig(name=slave_name, factory=BuildFactory(lb_steps), slavenames=slave_name, builddir=slave_name))

    # agregando a la lista de 'forzados'
    forced_builders.append(slave_name)


################################## HORARIOS FORZADOS ##################################

forced_scheduler = ForceScheduler(name='Forzar', builderNames = forced_builders)
c['schedulers'].append(forced_scheduler)


#################################### AUTENTICACION ####################################

authz_cfg = Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=BasicAuth([(BB_USER, BB_PASSWD)]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

c['status'].append(WebStatus(http_port=HTTP_WEB_PORT, authz=authz_cfg))
